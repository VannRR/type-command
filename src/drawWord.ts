import { HexColor, Layer, Option, Vector } from "./types.ts";
import { drawGrid } from "./utility.ts";

export const CHAR_GRID_SIZE = 7;

const CHARS = new Map([
  [
    "A",
    [
      [0, 0, 0, 1, 1, 0, 0],
      [0, 0, 1, 1, 1, 1, 0],
      [0, 1, 1, 0, 0, 1, 1],
      [0, 1, 1, 0, 0, 1, 1],
      [0, 1, 1, 1, 1, 1, 1],
      [0, 1, 1, 0, 0, 1, 1],
      [0, 1, 1, 0, 0, 1, 1],
    ],
  ],
  [
    "B",
    [
      [1, 1, 1, 1, 1, 1, 0],
      [0, 1, 1, 0, 0, 1, 1],
      [0, 1, 1, 0, 0, 1, 1],
      [0, 1, 1, 1, 1, 0, 0],
      [0, 1, 1, 0, 0, 1, 1],
      [0, 1, 1, 0, 0, 1, 1],
      [1, 1, 1, 1, 1, 1, 0],
    ],
  ],
  [
    "C",
    [
      [0, 0, 1, 1, 1, 1, 0],
      [0, 1, 1, 0, 0, 1, 1],
      [1, 1, 0, 0, 0, 0, 0],
      [1, 1, 0, 0, 0, 0, 0],
      [1, 1, 0, 0, 0, 0, 0],
      [0, 1, 1, 0, 0, 1, 1],
      [0, 0, 1, 1, 1, 1, 0],
    ],
  ],
  [
    "D",
    [
      [1, 1, 1, 1, 1, 1, 0],
      [0, 1, 1, 0, 0, 1, 1],
      [0, 1, 1, 0, 0, 1, 1],
      [0, 1, 1, 0, 0, 1, 1],
      [0, 1, 1, 0, 0, 1, 1],
      [0, 1, 1, 0, 0, 1, 1],
      [1, 1, 1, 1, 1, 1, 0],
    ],
  ],
  [
    "E",
    [
      [1, 1, 1, 1, 1, 1, 1],
      [0, 1, 1, 0, 0, 0, 1],
      [0, 1, 1, 0, 1, 0, 0],
      [0, 1, 1, 1, 1, 0, 0],
      [0, 1, 1, 0, 1, 0, 0],
      [0, 1, 1, 0, 0, 0, 1],
      [1, 1, 1, 1, 1, 1, 1],
    ],
  ],
  [
    "F",
    [
      [1, 1, 1, 1, 1, 1, 1],
      [0, 1, 1, 0, 0, 0, 1],
      [0, 1, 1, 0, 1, 0, 0],
      [0, 1, 1, 1, 1, 0, 0],
      [0, 1, 1, 0, 1, 0, 0],
      [0, 1, 1, 0, 0, 0, 0],
      [1, 1, 1, 1, 0, 0, 0],
    ],
  ],
  [
    "G",
    [
      [0, 0, 1, 1, 1, 1, 0],
      [0, 1, 1, 0, 0, 1, 1],
      [1, 1, 0, 0, 0, 0, 0],
      [1, 1, 0, 0, 0, 0, 0],
      [1, 1, 0, 0, 1, 1, 1],
      [0, 1, 1, 0, 0, 1, 1],
      [0, 0, 1, 1, 1, 1, 1],
    ],
  ],
  [
    "H",
    [
      [0, 1, 1, 0, 0, 1, 1],
      [0, 1, 1, 0, 0, 1, 1],
      [0, 1, 1, 0, 0, 1, 1],
      [0, 1, 1, 1, 1, 1, 1],
      [0, 1, 1, 0, 0, 1, 1],
      [0, 1, 1, 0, 0, 1, 1],
      [0, 1, 1, 0, 0, 1, 1],
    ],
  ],
  [
    "I",
    [
      [0, 1, 1, 1, 1, 1, 1],
      [0, 0, 0, 1, 1, 0, 0],
      [0, 0, 0, 1, 1, 0, 0],
      [0, 0, 0, 1, 1, 0, 0],
      [0, 0, 0, 1, 1, 0, 0],
      [0, 0, 0, 1, 1, 0, 0],
      [0, 1, 1, 1, 1, 1, 1],
    ],
  ],
  [
    "J",
    [
      [0, 0, 0, 1, 1, 1, 1],
      [0, 0, 0, 0, 1, 1, 0],
      [0, 0, 0, 0, 1, 1, 0],
      [0, 0, 0, 0, 1, 1, 0],
      [1, 1, 0, 0, 1, 1, 0],
      [1, 1, 0, 0, 1, 1, 0],
      [0, 1, 1, 1, 1, 0, 0],
    ],
  ],
  [
    "K",
    [
      [1, 1, 1, 0, 0, 1, 1],
      [0, 1, 1, 0, 0, 1, 1],
      [0, 1, 1, 0, 1, 1, 0],
      [0, 1, 1, 1, 1, 0, 0],
      [0, 1, 1, 0, 1, 1, 0],
      [0, 1, 1, 0, 0, 1, 1],
      [1, 1, 1, 0, 0, 1, 1],
    ],
  ],
  [
    "L",
    [
      [1, 1, 1, 1, 0, 0, 0],
      [0, 1, 1, 0, 0, 0, 0],
      [0, 1, 1, 0, 0, 0, 0],
      [0, 1, 1, 0, 0, 0, 0],
      [0, 1, 1, 0, 0, 0, 1],
      [0, 1, 1, 0, 0, 1, 1],
      [1, 1, 1, 1, 1, 1, 1],
    ],
  ],
  [
    "M",
    [
      [1, 1, 0, 0, 0, 1, 1],
      [1, 1, 1, 0, 1, 1, 1],
      [1, 1, 1, 1, 1, 1, 1],
      [1, 1, 1, 1, 1, 1, 1],
      [1, 1, 0, 1, 0, 1, 1],
      [1, 1, 0, 0, 0, 1, 1],
      [1, 1, 0, 0, 0, 1, 1],
    ],
  ],
  [
    "N",
    [
      [1, 1, 0, 0, 0, 1, 1],
      [1, 1, 1, 0, 0, 1, 1],
      [1, 1, 1, 1, 0, 1, 1],
      [1, 1, 0, 1, 1, 1, 1],
      [1, 1, 0, 0, 1, 1, 1],
      [1, 1, 0, 0, 0, 1, 1],
      [1, 1, 0, 0, 0, 1, 1],
    ],
  ],
  [
    "O",
    [
      [0, 0, 1, 1, 1, 0, 0],
      [0, 1, 1, 0, 1, 1, 0],
      [1, 1, 0, 0, 0, 1, 1],
      [1, 1, 0, 0, 0, 1, 1],
      [1, 1, 0, 0, 0, 1, 1],
      [0, 1, 1, 0, 1, 1, 0],
      [0, 0, 1, 1, 1, 0, 0],
    ],
  ],
  [
    "P",
    [
      [1, 1, 1, 1, 1, 1, 0],
      [0, 1, 1, 0, 0, 1, 1],
      [0, 1, 1, 0, 0, 1, 1],
      [0, 1, 1, 1, 1, 1, 0],
      [0, 1, 1, 0, 0, 0, 0],
      [0, 1, 1, 0, 0, 0, 0],
      [1, 1, 1, 1, 0, 0, 0],
    ],
  ],
  [
    "Q",
    [
      [0, 0, 1, 1, 1, 0, 0],
      [0, 1, 1, 0, 1, 1, 0],
      [1, 1, 0, 0, 0, 1, 1],
      [1, 1, 0, 0, 0, 1, 1],
      [1, 1, 0, 1, 1, 0, 1],
      [0, 1, 1, 0, 1, 1, 0],
      [0, 0, 1, 1, 0, 1, 1],
    ],
  ],
  [
    "R",
    [
      [1, 1, 1, 1, 1, 1, 0],
      [0, 1, 1, 0, 0, 1, 1],
      [0, 1, 1, 0, 0, 1, 1],
      [0, 1, 1, 1, 1, 1, 0],
      [0, 1, 1, 0, 1, 1, 0],
      [0, 1, 1, 0, 0, 1, 1],
      [1, 1, 1, 0, 0, 1, 1],
    ],
  ],
  [
    "S",
    [
      [0, 0, 1, 1, 1, 1, 0],
      [0, 1, 1, 0, 0, 1, 1],
      [0, 1, 1, 0, 0, 0, 0],
      [0, 0, 1, 1, 1, 1, 0],
      [0, 0, 0, 0, 0, 1, 1],
      [0, 1, 1, 0, 0, 1, 1],
      [0, 0, 1, 1, 1, 1, 0],
    ],
  ],
  [
    "T",
    [
      [0, 1, 1, 1, 1, 1, 1],
      [0, 1, 0, 1, 1, 0, 1],
      [0, 0, 0, 1, 1, 0, 0],
      [0, 0, 0, 1, 1, 0, 0],
      [0, 0, 0, 1, 1, 0, 0],
      [0, 0, 0, 1, 1, 0, 0],
      [0, 0, 1, 1, 1, 1, 0],
    ],
  ],
  [
    "U",
    [
      [0, 1, 1, 0, 0, 1, 1],
      [0, 1, 1, 0, 0, 1, 1],
      [0, 1, 1, 0, 0, 1, 1],
      [0, 1, 1, 0, 0, 1, 1],
      [0, 1, 1, 0, 0, 1, 1],
      [0, 1, 1, 0, 0, 1, 1],
      [0, 0, 1, 1, 1, 1, 0],
    ],
  ],
  [
    "V",
    [
      [0, 1, 1, 0, 0, 1, 1],
      [0, 1, 1, 0, 0, 1, 1],
      [0, 1, 1, 0, 0, 1, 1],
      [0, 1, 1, 0, 0, 1, 1],
      [0, 1, 1, 0, 0, 1, 1],
      [0, 0, 1, 1, 1, 1, 0],
      [0, 0, 0, 1, 1, 0, 0],
    ],
  ],
  [
    "W",
    [
      [1, 1, 0, 0, 0, 1, 1],
      [1, 1, 0, 0, 0, 1, 1],
      [1, 1, 0, 0, 0, 1, 1],
      [1, 1, 0, 1, 0, 1, 1],
      [1, 1, 1, 1, 1, 1, 1],
      [1, 1, 1, 0, 1, 1, 1],
      [1, 1, 0, 0, 0, 1, 1],
    ],
  ],
  [
    "X",
    [
      [1, 1, 0, 0, 0, 1, 1],
      [0, 1, 1, 0, 1, 1, 0],
      [0, 0, 1, 1, 1, 0, 0],
      [0, 0, 1, 1, 1, 0, 0],
      [0, 1, 1, 0, 1, 1, 0],
      [1, 1, 0, 0, 0, 1, 1],
      [1, 1, 0, 0, 0, 1, 1],
    ],
  ],
  [
    "Y",
    [
      [0, 1, 1, 0, 0, 1, 1],
      [0, 1, 1, 0, 0, 1, 1],
      [0, 1, 1, 0, 0, 1, 1],
      [0, 0, 1, 1, 1, 1, 0],
      [0, 0, 0, 1, 1, 0, 0],
      [0, 0, 0, 1, 1, 0, 0],
      [0, 0, 1, 1, 1, 1, 0],
    ],
  ],
  [
    "Z",
    [
      [1, 1, 1, 1, 1, 1, 1],
      [1, 1, 0, 0, 0, 1, 1],
      [1, 0, 0, 0, 1, 1, 0],
      [0, 0, 0, 1, 1, 0, 0],
      [0, 0, 1, 1, 0, 0, 1],
      [0, 1, 1, 0, 0, 1, 1],
      [1, 1, 1, 1, 1, 1, 1],
    ],
  ],
  [
    "!",
    [
      [0, 0, 0, 0, 0, 1, 1],
      [0, 0, 0, 0, 0, 1, 1],
      [0, 0, 0, 0, 0, 1, 1],
      [0, 0, 0, 0, 0, 1, 1],
      [0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 1, 1],
      [0, 0, 0, 0, 0, 1, 1],
    ],
  ],
]);

const WORD_MIDDLE_FACTOR = 0.55;

export function drawWord(
  layer: Layer,
  backgroundColor: Option<HexColor>,
  textColor: HexColor,
  coords: Vector,
  pixelSize: number,
  word: string
): void {
  if (typeof word !== "string") {
    throw new Error("Word must be a string");
  }

  if (word.length === 0) {
    return;
  }

  const charWidth = CHAR_GRID_SIZE * pixelSize;
  const charHeight = CHAR_GRID_SIZE * pixelSize;
  const wordMiddle = Math.floor(word.length * charWidth * WORD_MIDDLE_FACTOR);

  if (backgroundColor === null) {
    layer.clearRect(
      coords.x - wordMiddle - pixelSize * 3,
      coords.y - pixelSize * 2,
      word.length * charWidth + pixelSize * word.length + pixelSize * 5,
      charHeight + pixelSize * 4
    );
  } else {
    layer.fillStyle = backgroundColor;
    layer.fillRect(
      coords.x - wordMiddle - pixelSize * 3,
      coords.y - pixelSize * 2,
      word.length * charWidth + pixelSize * word.length + pixelSize * 5,
      charHeight + pixelSize * 4
    );
  }

  layer.fillStyle = textColor;

  for (let l = 0; l < word.length; l++) {
    const char = CHARS.get(word[l]);
    if (char === undefined) {
      continue;
    }
    drawGrid(
      layer,
      {
        x: coords.x + l * charWidth + l * pixelSize - wordMiddle,
        y: coords.y,
      },
      pixelSize,
      char
    );
  }
}
